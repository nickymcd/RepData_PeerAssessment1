flights %>% select(origin, dest) %>% distinct()
flights %>% mutate(speed = distance/airtime*60)
flights %>% mutate(speed = distance/air_time*60)
flights %>% transmute(speed = distance/air_time*60)
mtcars %>% head()
mtcars  head(%>% add_rownames("Model") %>% head()
mtcars %>% add_rownames("Model") %>% head()
mtcars %>% tbl_df()
flights%>% group_by(month) %>% summarise(cnt =n())
flights%>% group_by(month) %>% tally()
flights %>% count(month)
flights %>% group_by(month) %>% tally(sort=TRUE)
flights%>% count(sort = TRUE)
flights%>% count(month,sort = TRUE)
flights%>% group_by(month) %>% summarise(dist - sum(distance))
flights%>% group_by(month) %>% summarise(dist = sum(distance))
flights %>% count(month,wt = distance)
flights %>% group_by(month) %>% group_size
flights %>% group_by(month) %>% n_groups()
flights %>% group_by(month, day) %>% summarise(cnt = n()) %>% arrange(desc(cnt)) %>% print(n=40)
flights %>% group_by(month, day) %>% summarise(cnt = n()) %>% ungroup ()%>% arrange(desc(cnt)) %>% print(n=40)
data_frame(a =1:6, b = a*2, c ='string', 'd+e = 1') %>% glimpse()
data_frame(a =1:6, b = a*2, c ='string', 'd+e' = 1) %>% glimpse()
(a <- data_frame(color = c("green" ,"yellow", "red"), num =1:3))
(b <- data_fram(color = c("green", "yellow", "pink"), size = c("S", "M", "L")))
(b <- data_frame(color = c("green", "yellow", "pink"), size = c("S", "M", "L")))
inner_join(a,b)
full_join(a,b)
left_join(a,b)
right_join(a,b)
left_join(b,a)
semi_join(a,b)
anti_join(a,b)
b <- %>% rename(col=color)
b <- b %>% rename(col=color)
inner_join(a,b, by=c("color" = "col"))
flights %>% print(n=15)
flights %>% print(width=inf)
flights %>% print(width=Inf)
flights %>% View()
##Getting and Cleaning Data_Project _October 2015
##This script produces a tidy dataset from activity data obtained using smartphones.
##The final script is an average of sensor data by activity by subject.
##Dataset name is: sensor_avg_by_act_sub
##Full details http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
library(plyr)
# Get files
filename <- "getdata_dataset.zip"
## Download and unzip the dataset:
uci_data <- "UCI\ HAR\ Dataset"
feature_file <- paste(uci_data, "/features.txt", sep = "")
activity_labels_file <- paste(uci_data, "/activity_labels.txt", sep = "")
x_train_file <- paste(uci_data, "/train/X_train.txt", sep = "")
y_train_file <- paste(uci_data, "/train/y_train.txt", sep = "")
subject_train_file <- paste(uci_data, "/train/subject_train.txt", sep = "")
x_test_file  <- paste(uci_data, "/test/X_test.txt", sep = "")
y_test_file  <- paste(uci_data, "/test/y_test.txt", sep = "")
subject_test_file <- paste(uci_data, "/test/subject_test.txt", sep = "")
# Load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
# 1. Merge training and test sets to create one data set
# Binding sensor data
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sensor_data <- cbind(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
# Label columns
sensor_labels <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId"))[,2]
names(sensor_data) <- sensor_labels
# 2. Extracts only the mean and standard deviation for each measurement
sensor_data_mean_std <- sensor_data[,grepl("mean|std|Subject|ActivityId", names(sensor_data))]
# 3. Uses descriptive activity names to name the activities in the data set
sensor_data_mean_std <- join(sensor_data_mean_std, activity_labels, by = "ActivityId", match = "first")
sensor_data_mean_std <- sensor_data_mean_std[,-1]
# 4. Appropriately labels the data set with descriptive names
# Take out parentheses
names(sensor_data_mean_std) <- gsub('\\(|\\)',"",names(sensor_data_mean_std), perl = TRUE)
# Make valid names
names(sensor_data_mean_std) <- make.names(names(sensor_data_mean_std))
# Make clear names
names(sensor_data_mean_std) <- gsub('Acc',"Acceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Gyro',"AngularSpeed",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Mag',"Magnitude",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^t',"TimeDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^f',"FrequencyDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.mean',".Mean",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.std',".StandardDeviation",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq\\.',"Frequency.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq$',"Frequency",names(sensor_data_mean_std))
# 5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
sensor_avg_by_act_sub = ddply(sensor_data_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(sensor_avg_by_act_sub, file = "sensor_avg_by_act_sub.txt", row.names = FALSE)
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, column_count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res,sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
skip()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
skip()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = c("passed"))
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
tidyr()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
rest
res
separate()
?separate
separate(res,sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
swirl()
Sys,getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch(0)
stopwatch()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(r_arch:country, cran)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -[x:size])
select(cran, -(x:size)
)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, size > 100500 && r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country (ascending), r_version (descending),ip_id (ascending))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, siz_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library("lattice")
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
head(nlme)
summary(nlme)
?print.trellis
?par
?splom
?trellis.par.set
library(swirl)
rm(list=ls())
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[x.limits]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source("plot1.R", local = TRUE)
source(pathtofile = "plot1.R", local = TRUE)
skip()
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth")
)
qplot(hwy,data = mpg, color = drv)
qplot(y=hwy,data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy. data = mpg, fill = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv )
qplot(hwy, data = mpg, facets = drv ~ .)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg gem = c("point", "smooth"), facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
g <- ggplot(mpg, aes(disp, hwy))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point() + geom_smooth()
g+geom_point() + geom_smooth = "lm"
skip()
g+geom_point() + geom_smooth(method ="lm") + facet_grid (.~ drv)
g+geom_point() + geom_smooth(method ="lm") + facet_grid (.~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv), labs(title = "Swirl Rules1"), labs(x = "Displacement", y = "Hwy Mileage"))
skip()
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = lm, se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+ geo_point(aes(color = drv))+ theme_bw(base_family = "Times")
g+ geom_point(aes(color = drv))+ theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim =c(-3,3)
)
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(), ylim(-3,3)
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins = TRUE)
g + geom_point() + facet_grid(drv~cyl,margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl,margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", smooth), facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth'), facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
g <- ggplot(mpg, aes(disp, hwy))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point() + geom_smooth()
g+geom_point() + geom_smooth("lm")
g+geom_point() + geom_smooth(method ="lm")
g+geom_point() + geom_smooth(method ="lm") + facet_grid = .~ drv
g+geom_point() + geom_smooth(method ="lm") + facet_grid(. ~ drv)
g+geom_point() + geom_smooth(method ="lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drive)) + labs("Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs("Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv) + theme_bw(base_family = "Times")
)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- gplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- (mpg, aes(x = displ, y = hwy, color = factor(year)))
g <- (mpg, aes(x = displ, y = hwy, color = factor(year))
skip()
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE), geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
skip()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(prie, data = diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, bindwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = "cut")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm", facet = (. ~cut))
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm", facet = . ~cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm", facets = . ~cut)
g <- (diamonds, aes(depth, price))
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
skip()
setwd("C:/Users/Nicky/Desktop/datasciencecoursera/RepData_PeerAssessment1")
##Bring the data in
unzip("activity.zip")
activity <- read.csv("activity.csv")
#Make a histogram of mean steps per day
meansteps <- aggregate(steps ~ date, data = activity, FUN = sum, na.rm = TRUE)
hist(meansteps$steps, col = "Blue", main = "Daily steps", xlab = "Total steps" )
#calculate mean and median values
mean(meansteps$steps)
median(meansteps$steps)
#calculate interval with highest frequency of steps
interval <- aggregate(steps ~ interval, activity, FUN = mean, na.rm = TRUE)
plot(interval, main = "Number of steps per 5 minute interval",type = "l", xlab = "5 minute interval",
ylab = "Average number of steps")
#max interval calculation
interval$interval[which.max(interval$steps)]
#imputing missing values
sum(is.na(activity)) #also check using summary
#average over the 5 minute intervals
activity <- merge(activity, interval, by = "interval", suffixes = c("",
".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[, c(1:3)]
#Reaggregate and redo histogram and mean and median values.
total2 <- aggregate(steps ~ date, data = activity, FUN = sum)
hist(total2$steps, col = "Blue", main = "Daily steps", xlab = "Total steps" )
mean(total2$steps)
median(total2$steps)
#Differences between weekends and weekdays
library(chron)
activity$weekend <- is.weekend(as.Date(activity$date))
int_agg2 <- aggregate(steps ~ weekend + interval, activity, FUN = mean)
with(int_agg2, plot(interval, steps, main = "Average Steps by Time of Day, Weekend vs. Weekday", type = "n"))
with(subset(int_agg2, weekend == TRUE), points(interval, steps, type = "l", col = "blue"))
with(subset(int_agg2, weekend == FALSE), points(interval, steps, type = "l",col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Weekend", "Weekday"))
with(days, plot(interval, steps, main = "Activity Levels - Weekend versus Weekday", type = "n"))
with(subset(days, weekend == TRUE), points(interval, steps, type = "l", col = "blue"))
with(subset(days, weekend == FALSE), points(interval, steps, type = "l",col = "red"))
legend("topright", pch = 0.5, col = c("blue", "red"), legend = c("Weekend", "Weekday"))
library(chron)
activity$weekend <- is.weekend(as.Date(activity$date))
days <- aggregate(steps ~ weekend + interval, activity, FUN = mean)
with(days, plot(interval, steps, main = "Activity Levels - Weekend versus Weekday", type = "n"))
with(subset(days, weekend == TRUE), points(interval, steps, type = "l", col = "blue"))
with(subset(days, weekend == FALSE), points(interval, steps, type = "l",col = "red"))
legend("topright", pch = 0.5, col = c("blue", "red"), legend = c("Weekend", "Weekday"))
?pch
library(chron)
activity$weekend <- is.weekend(as.Date(activity$date))
days <- aggregate(steps ~ weekend + interval, activity, FUN = mean)
with(days, plot(interval, steps, main = "Activity Levels - Weekend versus Weekday", type = "n"))
with(subset(days, weekend == TRUE), points(interval, steps, type = "l", col = "blue"))
with(subset(days, weekend == FALSE), points(interval, steps, type = "l",col = "red"))
legend("topright", pch = 21, col = c("blue", "red"), legend = c("Weekend", "Weekday"))
library(chron)
activity$weekend <- is.weekend(as.Date(activity$date))
days <- aggregate(steps ~ weekend + interval, activity, FUN = mean)
with(days, plot(interval, steps, main = "Activity Levels - Weekend versus Weekday", type = "n"))
with(subset(days, weekend == TRUE), points(interval, steps, type = "l", col = "blue"))
with(subset(days, weekend == FALSE), points(interval, steps, type = "l",col = "red"))
legend("topright",  col = c("blue", "red"), legend = c("Weekend", "Weekday"))
library(chron)
activity$weekend <- is.weekend(as.Date(activity$date))
days <- aggregate(steps ~ weekend + interval, activity, FUN = mean)
with(days, plot(interval, steps, main = "Activity Levels - Weekend versus Weekday", type = "n"))
with(subset(days, weekend == TRUE), points(interval, steps, type = "l", col = "blue"))
with(subset(days, weekend == FALSE), points(interval, steps, type = "l",col = "red"))
legend("topright", pch = 10,  col = c("blue", "red"), legend = c("Weekend", "Weekday"))
source('C:/Users/Nicky/Desktop/datasciencecoursera/RepData_PeerAssessment1/PA1_template_files/original R code.R')
